using System;
using System.IO;
using iText.Kernel.Pdf;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.ExtendedProperties;
using DocumentFormat.OpenXml.Wordprocessing;
using System.Diagnostics;
using System.Text;

public class Program
{
    public static void Main(string[] args)
    {
        string directoryPath = "c:\\files";
        RenameFiles(directoryPath);
    }

    public static void RenameFiles(string directory)
    {
        string[] files = Directory.GetFiles(directory);

        foreach (string file in files)
        {
            string extension = Path.GetExtension(file);
            string newFileName = "";

            switch (extension.ToLower())
            {
                case ".pdf":
                    newFileName = ExtractAuthorNamePdf(file) ?? "unknown.pdf";
                    break;
                case ".xlsx":
                    newFileName = ExtractAuthorNameXlsx(file) ?? "unknown.xlsx";
                    break;
                case ".docx":
                    newFileName = ExtractAuthorNameDocx(file) ?? "unknown.docx";
                    break;
            }

            string newFilePath = Path.Combine(directory, newFileName);

            // Handle if the new file name already exists
            int counter = 1;
            while (File.Exists(newFilePath))
            {
                string nameWithoutExtension = Path.GetFileNameWithoutExtension(newFileName);
                string extensionOnly = Path.GetExtension(newFileName);
                newFileName = $"{nameWithoutExtension}_{counter}{extensionOnly}";
                newFilePath = Path.Combine(directory, newFileName);
                counter++;
            }

            File.Copy(file, newFilePath);
            Console.WriteLine($"Created a renamed copy: {newFileName}");
        }
    }

    public static string ExtractAuthorNamePdf(string pdfPath)
    {
        try
        {
            PdfDocument pdfDocument = new PdfDocument(new PdfReader(pdfPath));
            string author = pdfDocument.GetDocumentInfo().GetAuthor();
            pdfDocument.Close();
            return author;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error extracting author name from PDF: {pdfPath}");
            return null;
        }
    }

    public static string ExtractAuthorNameXlsx(string xlsxPath)
    {
        try
        {
            using (SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Open(xlsxPath, false))
            {
                ExtendedFilePropertiesPart propertiesPart = spreadsheetDocument.ExtendedFilePropertiesPart;
                if (propertiesPart.Properties.Creator != null)
                {
                    return propertiesPart.Properties.Creator;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error extracting author name from XLSX: {xlsxPath}");
        }

        return null;
    }

    public static string ExtractAuthorNameDocx(string docxPath)
    {
        try
        {
            using (WordprocessingDocument wordDocument = WordprocessingDocument.Open(docxPath, false))
            {
                var coreFilePropertiesPart = wordDocument.CoreFilePropertiesPart;
                if (coreFilePropertiesPart != null)
                {
                    var docProps = coreFilePropertiesPart.CoreFileProperties;
                    if (docProps != null && docProps.Creator != null)
                    {
                        return docProps.Creator.Value;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error extracting author name from DOCX: {docxPath}");
        }

        return null;
    }
}
